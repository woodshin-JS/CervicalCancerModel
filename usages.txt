
Before starting, download the dataset found at this link --> https://www.kaggle.com/datasets/egeyigiterbil/cervicalcancer/data
Extract the files to a Directory named CervicalCancer
the file structure should look like
-->CervicalCancer
           --> Herlev
           --> Mendeley
           --> sipakmed
--> train.py
--> dataloader.py
--> ....

To display data visually:
python dataloader.py --dataset Herlev --classification binary --visualize
To display the data with augmentations:
python dataloader.py --dataset Herlev --classification binary --augmentation 2 --visualize

To change the classification:
python dataloader.py --dataset Herlev --classification multiclass --augmentation 0 --visualize

To train:
python train.py --model_name model1-2-3-4-5-6 --dataset Herlev-Mendeley-sipakmed --classification binary or multiclass --augmentation 0-1-2 --epochs 100

The training script will put the model into a new folder called checkpoints
For no augmentations, use 0 , and for augmentations, use 2. Augmentation 1 doesn't make a difference.

To test with all metrics:
python test.py --model_name model1  --checkpoint ./checkpoints/model1_best.pth --dataset Herlev --classification binary --num_visualize 15 --save_dir ./evaluation_results_binary

model_name retrieves the model architecture, --checkpoint retrieves the file name, dataset and classification are the same as above, num visualize will show visualized results, and the results will be
saved into a new folder.

multiclass classification example:
python test.py --model_name model1  --checkpoint ./checkpoints/model1_best.pth --dataset Herlev --classification multiclass--num_visualize 15 --save_dir ./evaluation_results_multiclass

To Ensemble:
python test_ensemble.py --models model1 model2 model3 --checkpoints ./checkpoints/model1_best.pth ./checkpoints/model2_best.pth ./checkpoints/model3_best.pth --ensemble_method avg_prob --dataset Herlev --classification binary --num_visualize 15 --save_dir ./evaluation_results_ensemble --num_visualize 10


--models retrieves the architectures, --checkpoints are the same as above, but they have to be as same order as --models, 
There are 3 ensembling techniques, avg_prob, max_prob, majority_vote.
